## SD_CMakelist ##

# general
option(SD_VULKAN                     "sd: vulkan backend" OFF)

if (SD_VULKAN)
    message("-- Use Vulkan as backend stable-diffusion")
    set(GGML_VULKAN ON)
    add_definitions(-DSD_USE_VULKAN)
endif ()

set(SD_LIB stable-diffusion)





ggml-aarch64        ARM64
ggml-sycl           Intel
ggml-metal          Apple
ggml-cann           Huawei
ggml-cuda           Nvidia

'''

    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-kompute.cpp")

    
    print("-- Use Flash Attention for memory optimization")
    env_aisuite.AppendUnique(CPPDEFINES=["SD_USE_FLASH_ATTENTION"])

    if env["platform"] == "macos":
        print("-- Use Metal as backend stable-diffusion")
        env_aisuite.AppendUnique(CPPDEFINES=["SD_USE_METAL"])
        GGML_METAL ON

    elif env["platform"] == "android":
        print("-- Use Vulkan as backend stable-diffusion")
        env_aisuite.AppendUnique(CPPDEFINES=["SD_USE_VULKAN"])
        GGML_VULKAN ON

    else:
    
        # Ӣ�ض�CPU
        print("-- Use SYCL as backend stable-diffusion")
        env_aisuite.AppendUnique(CPPDEFINES=["SD_USE_SYCL"])
        GGML_SYCL ON

        # disable fast-math on host
        if (WIN32)
            set(SYCL_COMPILE_OPTIONS /fp:precise)
        else()
            set(SYCL_COMPILE_OPTIONS -fp-model=precise)
        print("-- Turn off fast-math for host in SYCL backend")
        target_compile_options(${SD_LIB} PRIVATE ${SYCL_COMPILE_OPTIONS})


        # NV GPU
        print("-- Use CUBLAS as backend stable-diffusion")
        env_aisuite.AppendUnique(SD_USE_CUBLAS)
        GGML_CUDA ON

        # AMD GPU
        message("-- Use HIPBLAS as backend stable-diffusion")
        GGML_HIPBLAS ON
        if(SD_FAST_SOFTMAX)
            GGML_CUDA_FAST_SOFTMAX ON


        if env["platform"] == "linuxbsd":
            env_aisuite.AppendUnique(CPPDEFINES=["XR_OS_LINUX"])

            if env["x11"]:
                env_aisuite.AppendUnique(CPPDEFINES=["XR_USE_PLATFORM_XLIB"])
            if env["wayland"]:
                env_aisuite.AppendUnique(CPPDEFINES=["XR_USE_PLATFORM_WAYLAND"])
            env_aisuite.AppendUnique(CPPDEFINES=["HAVE_SECURE_GETENV"])

        elif env["platform"] == "windows":
            env_aisuite.AppendUnique(CPPDEFINES=["XR_OS_WINDOWS", "NOMINMAX", "XR_USE_PLATFORM_WIN32"])
'''
