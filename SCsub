#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

env_aisuite = env_modules.Clone()

env_aisuite.AppendUnique(CCFLAGS=['-O2'])


# Thirdparty source files
thirdparty_obj = []

if env["builtin_aisuite"]:
    thirdparty_dir = "aisuite"
    env_aisuite.Prepend(
        CPPPATH=[
            thirdparty_dir,
        ]
    )

    env_thirdparty = env_aisuite.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty['CXXFLAGS'] = '-std=c++11'

    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_dir + "/zip.c")

    # GGML loader

    env_thirdparty.AppendUnique(CPPDEFINES=["GGML_MAX_NAME=128"])

    env_thirdparty.Append(
        CPPPATH=[
            thirdparty_dir + "/ggml/include",
            thirdparty_dir + "/ggml/src",
        ]
    )
    thirdparty_ggml_dir = thirdparty_dir + "/ggml/src/"
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml.c")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-alloc.c")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-blas.cpp")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-backend.c")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-quants.c")

    # Use Vulkan as backend stable-diffusion
    env_aisuite.AppendUnique(CPPDEFINES=["SD_USE_VULKAN"])

    env_thirdparty.AppendUnique(CPPDEFINES=["GGML_USE_VULKAN"]) 
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-vulkan.cpp")

    print("------编译着色器------")
    import os
    vulkan_shaders_gen = env_thirdparty.add_program(env_thirdparty, 'vulkan-shaders-gen', [thirdparty_ggml_dir + "vulkan-shaders/vulkan-shaders-gen.cpp"], LIBS=['pthread'])

    vk_shader_dir = thirdparty_ggml_dir + "vulkan-shaders"
    vk_output_dir = thirdparty_ggml_dir + "vulkan-shaders-output"
    if not os.path.exists(vk_output_dir):
        os.makedirs(vk_output_dir)

    # .comp
    shader_files = Glob(vk_shader_dir + '/*.comp')
    # .spv
    shader_outputs = []
    for shader in shader_files:
        shader_output = vk_output_dir + '/' + os.path.basename(shader) + '.spv'
        shader_outputs.append(
            env_thirdparty.Command(
                shader_output, 
                shader, 
                vulkan_shaders_gen + [f' --input-dir {vk_shader_dir} --output-dir {vk_output_dir} --target-hpp ggml-vulkan-shaders.hpp --target-cpp ggml-vulkan-shaders.cpp --no-clean']
            )
        )

    env_thirdparty.Depends(thirdparty_obj, shader_outputs)

    env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []
env_aisuite.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

env.add_source_files(env.modules_sources, "*.cpp")

Export("env_aisuite")
SConscript("sd/SCsub")

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
