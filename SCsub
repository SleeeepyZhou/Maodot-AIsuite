#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

env_aisuite = env_modules.Clone()

# env_aisuite.AppendUnique(CCFLAGS=['-O2'])
# env_aisuite.AppendUnique(CXXFLAGS=['/std:c++14'])

thirdparty_obj = []

if env["builtin_aisuite"]:
    o_dir = "#modules/ai_suite/"
    thirdparty_dir = "#modules/ai_suite/aisuite/"
    env_aisuite.Prepend(
        CPPPATH=[
            o_dir,
            thirdparty_dir,
        ]
    )

    env_aisuite.disable_warnings()

    # GGML loader
    import os
    import sys

    linker_version = ''
    if sys.platform == 'darwin':
        linker_version = os.popen('otool -L <some_library>').read()
    elif sys.platform.startswith('linux'):
        linker_version = os.popen('ld -v').read()
    if 'dyld-1015.7' in linker_version:
        env_aisuite.Append(CPPDEFINES=['HAVE_BUGGY_APPLE_LINKER'])

    env_aisuite.AppendUnique(CPPDEFINES=["GGML_MAX_NAME=128"])
    env_aisuite.Append(
        CPPPATH=[
            thirdparty_dir + "ggml/src/",
            thirdparty_dir + "ggml/include/",
        ]
    )
    thirdparty_ggml_dir = thirdparty_dir + "ggml/src/"
    env_aisuite.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml.c")
    env_aisuite.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-alloc.c")
    env_aisuite.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-backend.c")
    env_aisuite.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-quants.c")
    env_aisuite.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-aarch64.c")
    # env_aisuite.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-blas.cpp")

    # SD
    env_aisuite.add_source_files(thirdparty_obj, thirdparty_dir + "zip.c")

    # Use Vulkan as backend stable-diffusion
    env_aisuite.AppendUnique(CPPDEFINES=["SD_USE_VULKAN"])
    env_aisuite.AppendUnique(CPPDEFINES=["GGML_USE_VULKAN"]) 
    env_aisuite.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-vulkan.cpp")

    '''
    print("------编译着色器------")
    env_vulkan = env_aisuite.Clone()
    vulkan_shaders_gen = env_vulkan.Program('vulkan-shaders-gen', [thirdparty_ggml_dir + "vulkan-shaders/vulkan-shaders-gen.cpp"], LIBS=['pthread'])

    vk_shader_dir = thirdparty_ggml_dir + "vulkan-shaders"
    vk_output_dir = thirdparty_ggml_dir + "vulkan-shaders-output"
    vk_header = thirdparty_ggml_dir + "ggml-vulkan-shaders.hpp"
    vk_source = thirdparty_ggml_dir + "ggml-vulkan-shaders.cpp"

    # .comp
    
    shader_files = Glob(vk_shader_dir + '/*.comp')
    shader_generation = env_vulkan.Command(
                [vk_header, vk_source], 
                shader_files, 
                ["./" + str(vulkan_shaders_gen[0]) + f' --input-dir {vk_shader_dir} --output-dir {vk_output_dir} --target-hpp ggml-vulkan-shaders.hpp --target-cpp ggml-vulkan-shaders.cpp --no-clean']
            )
    '''
    
    env_aisuite.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-vulkan-shaders.cpp")


    env.modules_sources += thirdparty_obj

    # Node

    # StableDiffusion
    Export("env_aisuite")
    env_aisuite.Append(
            CPPPATH=[
                o_dir + "sd_node/",
                o_dir + "sd_node/sd/", 
            ]
        )
    SConscript("sd_node/SCsub")
    SConscript("sd_node/sd/SCsub")

    # LLM

    # VLM

# Object Node source files

module_obj = []
env_aisuite.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
