#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

env_aisuite = env_modules.Clone()

env_aisuite.AppendUnique(CCFLAGS=['-O2'])


# Thirdparty source files
thirdparty_obj = []

if env["builtin_aisuite"]:
    thirdparty_dir = "#thirdparty/aisuite"
    env_aisuite.Prepend(
        CPPPATH=[
            thirdparty_dir,
        ]
    )

    env_thirdparty = env_aisuite.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.AppendUnique(CXXFLAGS=['-std=c++11'])

    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_dir + "zip.c")

    # GGML loader

    env_thirdparty.AppendUnique(CPPDEFINES=["GGML_MAX_NAME=128"])

    env_thirdparty.Append(
        CPPPATH=[
            thirdparty_dir + "/ggml/include",
            thirdparty_dir + "/ggml/src",
        ]
    )
    thirdparty_ggml_dir = thirdparty_dir + "/ggml/src"
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml.c")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-alloc.c")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-blas.cpp")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-backend.c")
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_ggml_dir + "ggml-quants.c")


    print("-- Use Vulkan as backend stable-diffusion")
    env_aisuite.AppendUnique(CPPDEFINES=["SD_USE_VULKAN"])

    print("-- Use Flash Attention for memory optimization")
    env_aisuite.AppendUnique(CPPDEFINES=["SD_USE_FLASH_ATTENTION"])

    GGML_VULKAN ON

    env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []
env_aisuite.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

env.add_source_files(env.modules_sources, "*.cpp")

Export("env_aisuite")
SConscript("sd/SCsub")

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
